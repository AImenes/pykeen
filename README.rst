PyKEEN |build|
==============
PyKEEN (Python KnowlEdge EmbeddiNgs) is a Python package designed to train and evaluate knowledge graph
embedding models (incorporating multi-modal information).

This package is part of the `KEEN Universe <https://github.com/SmartDataAnalytics/PyKEEN>`_.

Installation
------------
TBD after this is merged with PyKEEN

Usage
-----
This example shows how to train a model on a data set and test on another data set.

The fastest way to get up and running is to use the pipeline function. It
provides a high-level entry into the extensible functionality of this package.
The following example shows how to train and evaluate the TransE model on the
Nations dataset. By default, the training loop uses the open world assumption
and evaluates with rank-based evaluation.

>>> from poem.pipeline import pipeline
>>> result = pipeline(
...     model='TransE',
...     data_set='nations',
... )

The results are returned in a dataclass that has attributes for the trained
model, the training loop, and the evaluation.

POEM is extensible such that:

- Each model has the same API, so anything from ``poem.models`` can be dropped in
- Each training loop has the same API, so ``poem.training.CWATrainingLoop`` can be dropped in
- Triples factories can be generated by the user with ``from poem.triples.TriplesFactory``

Models
------
+---------------------------+-------------------------------------+
| Model                     | Implementation                      |
+===========================+=====================================+
| ComplEx                   | ``poem.models.ComplEx``             |
+---------------------------+-------------------------------------+
| ComplExLiteral            | ``poem.models.ComplexLiteralCWA``   |
+---------------------------+-------------------------------------+
| ConvE                     | ``poem.models.ConvE``               |
+---------------------------+-------------------------------------+
| ConvKB                    | ``poem.models.ConvKB``              |
+---------------------------+-------------------------------------+
| DistMult                  | ``poem.models.DistMult``            |
+---------------------------+-------------------------------------+
| DistmultLiteral           | ``poem.models.DistMultLiteral``     |
+---------------------------+-------------------------------------+
| ER-MLP                    | ``poem.models.ERMLP``               |
+---------------------------+-------------------------------------+
| HolE                      | ``poem.models.HolE``                |
+---------------------------+-------------------------------------+
| KG2E                      | ``poem.models.KG2E``                |
+---------------------------+-------------------------------------+
| NTN                       | ``poem.models.NTN``                 |
+---------------------------+-------------------------------------+
| ProjE                     | ``poem.models.ProjE``               |
+---------------------------+-------------------------------------+
| RESCAL                    | ``poem.models.RESCAL``              |
+---------------------------+-------------------------------------+
| RotatE                    | ``poem.models.RotatE``              |
+---------------------------+-------------------------------------+
| Structured Embedding (SE) | ``poem.models.StructuredEmbedding`` |
+---------------------------+-------------------------------------+
| TransD                    | ``poem.models.TransD``              |
+---------------------------+-------------------------------------+
| TransE                    | ``poem.models.TransE``              |
+---------------------------+-------------------------------------+
| TransH                    | ``poem.models.TransH``              |
+---------------------------+-------------------------------------+
| TransR                    | ``poem.models.TransR``              |
+---------------------------+-------------------------------------+
| TuckEr                    | ``poem.models.TuckEr``              |
+---------------------------+-------------------------------------+
| SimplE                    | ``poem.models.SimplE``              |
+---------------------------+-------------------------------------+
| Unstructured Model (UM)   | ``poem.models.UnstructuredModel``   |
+---------------------------+-------------------------------------+

Supporters
----------
This project has been supported by several organizations:

- `Smart Data Analytics (University of Bonn) <http://sda.cs.uni-bonn.de/>`_
- `Fraunhofer Institute for Intelligent Analysis and Information Systems <https://www.iais.fraunhofer.de/>`_
- `Bonn Aachen International Center for IT (University of Bonn) <http://www.b-it-center.de/>`_
- `Fraunhofer Institute for Algorithms and Scientific Computing <https://www.scai.fraunhofer.de/>`_
- `Fraunhofer Center for Machine Learning <https://www.cit.fraunhofer.de/de/zentren/maschinelles-lernen.html>`_
- `Technical University of Denmark - DTU Compute - Section for Cognitive Systems <https://www.compute.dtu.dk/english/research/research-sections/cogsys>`_
- `Technical University of Denmark - DTU Compute - Section for Statistics and Data Analysis <https://www.compute.dtu.dk/english/research/research-sections/stat>`_

.. |build| image:: https://travis-ci.com/mali-git/POEM_develop.svg?token=2tyMYiCcZbjqYscNWXwZ&branch=master
    :target: https://travis-ci.com/mali-git/POEM_develop
